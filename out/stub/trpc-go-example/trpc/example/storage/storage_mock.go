// Code generated by MockGen. DO NOT EDIT.
// Source: stub/trpc-go-example/trpc/example/storage/storage.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/trpc-go-example/trpc/example/storage/storage_mock.go -package=storage -self_package=trpc-go-example/trpc/example/storage --source=stub/trpc-go-example/trpc/example/storage/storage.trpc.go
//

// Package storage is a generated GoMock package.
package storage

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockStorageServiceService is a mock of StorageServiceService interface.
type MockStorageServiceService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceServiceMockRecorder
}

// MockStorageServiceServiceMockRecorder is the mock recorder for MockStorageServiceService.
type MockStorageServiceServiceMockRecorder struct {
	mock *MockStorageServiceService
}

// NewMockStorageServiceService creates a new mock instance.
func NewMockStorageServiceService(ctrl *gomock.Controller) *MockStorageServiceService {
	mock := &MockStorageServiceService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServiceService) EXPECT() *MockStorageServiceServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStorageServiceService) ISGOMOCK() struct{} {
	return struct{}{}
}

// Fetch mocks base method.
func (m *MockStorageServiceService) Fetch(ctx context.Context, req *FetchRequest) (*FetchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, req)
	ret0, _ := ret[0].(*FetchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockStorageServiceServiceMockRecorder) Fetch(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockStorageServiceService)(nil).Fetch), ctx, req)
}

// Store mocks base method.
func (m *MockStorageServiceService) Store(ctx context.Context, req *StoreRequest) (*StoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, req)
	ret0, _ := ret[0].(*StoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockStorageServiceServiceMockRecorder) Store(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStorageServiceService)(nil).Store), ctx, req)
}

// MockStorageServiceClientProxy is a mock of StorageServiceClientProxy interface.
type MockStorageServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceClientProxyMockRecorder
}

// MockStorageServiceClientProxyMockRecorder is the mock recorder for MockStorageServiceClientProxy.
type MockStorageServiceClientProxyMockRecorder struct {
	mock *MockStorageServiceClientProxy
}

// NewMockStorageServiceClientProxy creates a new mock instance.
func NewMockStorageServiceClientProxy(ctrl *gomock.Controller) *MockStorageServiceClientProxy {
	mock := &MockStorageServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockStorageServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageServiceClientProxy) EXPECT() *MockStorageServiceClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockStorageServiceClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// Fetch mocks base method.
func (m *MockStorageServiceClientProxy) Fetch(ctx context.Context, req *FetchRequest, opts ...client.Option) (*FetchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].(*FetchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockStorageServiceClientProxyMockRecorder) Fetch(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockStorageServiceClientProxy)(nil).Fetch), varargs...)
}

// Store mocks base method.
func (m *MockStorageServiceClientProxy) Store(ctx context.Context, req *StoreRequest, opts ...client.Option) (*StoreResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Store", varargs...)
	ret0, _ := ret[0].(*StoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockStorageServiceClientProxyMockRecorder) Store(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStorageServiceClientProxy)(nil).Store), varargs...)
}
